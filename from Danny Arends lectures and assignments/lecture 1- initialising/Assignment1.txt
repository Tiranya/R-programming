setwd("D:\programming\languages\R-programming\R-programming\from Danny Arends lectures and assignments\lecture 1- initialising")
#Data Analysis Using R by Danny Arends 
#Lecture 1 - Assignment 1
#copyright (c) 2025 - Tiranya Illanga Mudali
#Date written: 07/01/2025
#
#Using R as a calculator
1234+4567
#output = [1] 5801
#
100456-3350+23
#output = [1] 97129
#
#natural logarithm of 15
log(15)
#output = [1] 2.70805
#
4596/12
#output = [1] 383
#
#Euclidean division - division of one integer with another
#Euclidean division remainder of 10 and 6
10%%6
#output = [1] 4
#
#Euclidean division answer without decimals
10%/%6
#output = [1] 1
#
#normal answer
10/6
#output = [1] 1.666667
#
sqrt (-8)
#output = [1] NaN
#'NaN' - this means = 'not a number'
#
sqrt (4)
#output - [1] 2
#
sqrt (8)
#output = [1] 2.828427
#
#
#Vectors
#Create a vector (vector2a) with numbers 1 to 10
vector2a= c(1:10)
print (vector2a)
#output - [1]  1  2  3  4  5  6  7  8  9 10
#
vector2b=c(1,12,13,14,15,16,17,18,19,20)
print (vector2b)
#output - [1]  1 12 13 14 15 16 17 18 19 20
#
#use the seq function to create a vector2c with 1-100 every 5 numbers
vector2c = seq(1,100,5)
print (vector2c)
#output - [1]  1  6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96
#
#create a vector with vector2d_i with the letters of the alphabet
vector2d_i = seq(LETTERS)
print (vector2d_i)
#output - [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
#[24] 24 25 26
#
vector2d_i=c(LETTERS)
print (vector2d_i)
#output - [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q"
#[18] "R" "S" "T" "U" "V" "W" "X" "Y" "Z"
#
vector2d_ii = LETTERS[seq(2,26,2)
print (vector2d_ii)
#output - [1] "B" "D" "F" "H" "J" "L" "N" "P" "R" "T" "V" "X" "Z"
#
#what is the type of vector2a, 
#either use the class() function 
#or ask explicitly using the is.numeric() , is.character() 
#or the is.logical() functions
class(vector2a)
#output - [1] "integer"
is.numeric(vector2a)
#output - [1] TRUE
is.character(vector2a)
#output - [1] FALSE
#
#combine vector2a and vector2d in vector2f, 
#what is the type of the resulting vector ?
vector2f=c(vector2a,vector2d_ii)
print(vector2f)
#output -  [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "B"  "D"  "F"  "H"  "J" 
#[16] "L"  "N"  "P"  "R"  "T"  "V"  "X"  "Z"
class(vector2f)
#output - [1] "character"
#
#Use the sqrt() function to compute the square root of vector2a
sqrt (vector2a)
#output - [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427
#[9] 3.000000 3.162278
#
#
#Question 3
#3a - We can use the matrix() function to create a matrix, 
#create a 10x10 matrix that holds the numbers 1 to 100.
vector3a=matrix(1:100,10,10)
print (vector3a)
#output-      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
#        [1,]    1   11   21   31   41   51   61   71   81    91
#        [2,]    2   12   22   32   42   52   62   72   82    92
#        [3,]    3   13   23   33   43   53   63   73   83    93
#        [4,]    4   14   24   34   44   54   64   74   84    94
#        [5,]    5   15   25   35   45   55   65   75   85    95
#        [6,]    6   16   26   36   46   56   66   76   86    96
#        [7,]    7   17   27   37   47   57   67   77   87    97
#        [8,]    8   18   28   38   48   58   68   78   88    98
#        [9,]    9   19   29   39   49   59   69   79   89    99
#       [10,]   10   20   30   40   50   60   70   80   90   100
#
#
#3b - If you look at the help file of the matrix() function, 
#you see it has a parameter byrow do the same thing as in exercise 3a, 
#but now set the byrow parameter to TRUE, 
#how is this matrix different from the one in exercise 3a ?
vector3b=matrix(1:100,10,10,byrow=TRUE)
print (vector3b)
#the logic of 'true'
#should be in capitals for the statement to be identified
#output -       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
#         [1,]    1    2    3    4    5    6    7    8    9    10
#         [2,]   11   12   13   14   15   16   17   18   19    20
#         [3,]   21   22   23   24   25   26   27   28   29    30
#         [4,]   31   32   33   34   35   36   37   38   39    40
#         [5,]   41   42   43   44   45   46   47   48   49    50
#         [6,]   51   52   53   54   55   56   57   58   59    60
#         [7,]   61   62   63   64   65   66   67   68   69    70
#         [8,]   71   72   73   74   75   76   77   78   79    80
#         [9,]   81   82   83   84   85   86   87   88   89    90
#        [10,]   91   92   93   94   95   96   97   98   99   100
#
#This fills the rows first. normally it only fills the columns first 
#
#Select the 5th column from matrix3a, and select the 4th row from matrix3b
print (vector3b[4,5])
#(matrix name[row,column])
#output - [1] 35
vector3c=(vector3b[2,5])
print (vector3c)
#output - [1] 15
#
#3d - How can we translate matrix3a into matrix3b ?
vector3d = t(vector3a)
print (vector3d)
#output -       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
#         [1,]    1    2    3    4    5    6    7    8    9    10
#         [2,]   11   12   13   14   15   16   17   18   19    20
#         [3,]   21   22   23   24   25   26   27   28   29    30
#         [4,]   31   32   33   34   35   36   37   38   39    40
#         [5,]   41   42   43   44   45   46   47   48   49    50
#         [6,]   51   52   53   54   55   56   57   58   59    60
#         [7,]   61   62   63   64   65   66   67   68   69    70
#         [8,]   71   72   73   74   75   76   77   78   79    80
#         [9,]   81   82   83   84   85   86   87   88   89    90
#        [10,]   91   92   93   94   95   96   97   98   99   100
#
#3e - Add column names to matrix3a, using the LETTERS constant
rownames (vector3oua) = c(LETTERS)
print (vector3a)
#output - failed output
#
rownames (vector3a) <- c(LETTERS [seq (1:10)])
print (vector3a)
#attempt successful
#the number of names should be the same as the number of rows or columns
#output -  [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
#       A    1   11   21   31   41   51   61   71   81    91
#       B    2   12   22   32   42   52   62   72   82    92
#       C    3   13   23   33   43   53   63   73   83    93
#       D    4   14   24   34   44   54   64   74   84    94
#       E    5   15   25   35   45   55   65   75   85    95
#       F    6   16   26   36   46   56   66   76   86    96
#       G    7   17   27   37   47   57   67   77   87    97
#       H    8   18   28   38   48   58   68   78   88    98
#       I    9   19   29   39   49   59   69   79   89    99
#       J   10   20   30   40   50   60   70   80   90   100
#
#3f - Look up the help for the paste() function 
#and add your own rownames to matrix3a, 
#in the structure: “measurement N”, where N is the row number
rownames(vector3a)<-c(paste("measurement"),c(1:10))
#attempt error
#the error in this is including "measurement" in the c
rownames(vector3a)<-paste("measurement"),c(1:10)
print (vector3a)
#output -         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
# measurement 1     1   11   21   31   41   51   61   71   81    91
# measurement 2     2   12   22   32   42   52   62   72   82    92
# measurement 3     3   13   23   33   43   53   63   73   83    93
# measurement 4     4   14   24   34   44   54   64   74   84    94
# measurement 5     5   15   25   35   45   55   65   75   85    95
# measurement 6     6   16   26   36   46   56   66   76   86    96
# measurement 7     7   17   27   37   47   57   67   77   87    97
# measurement 8     8   18   28   38   48   58   68   78   88    98
# measurement 9     9   19   29   39   49   59   69   79   89    99
# measurement 10   10   20   30   40   50   60   70   80   90   100